<?php

namespace Shopware\Proxies\__CG__\Shopware\Models\Config;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Form extends \Shopware\Models\Config\Form implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setLabel($label)
    {
        $this->__load();
        return parent::setLabel($label);
    }

    public function getLabel()
    {
        $this->__load();
        return parent::getLabel();
    }

    public function setDescription($description)
    {
        $this->__load();
        return parent::setDescription($description);
    }

    public function getDescription()
    {
        $this->__load();
        return parent::getDescription();
    }

    public function getPosition()
    {
        $this->__load();
        return parent::getPosition();
    }

    public function setPosition($position)
    {
        $this->__load();
        return parent::setPosition($position);
    }

    public function getElement($name)
    {
        $this->__load();
        return parent::getElement($name);
    }

    public function setElement($type, $name, $options = NULL)
    {
        $this->__load();
        return parent::setElement($type, $name, $options);
    }

    public function removeElement($element)
    {
        $this->__load();
        return parent::removeElement($element);
    }

    public function addElement($element, $name = NULL, $options = NULL)
    {
        $this->__load();
        return parent::addElement($element, $name, $options);
    }

    public function getElements()
    {
        $this->__load();
        return parent::getElements();
    }

    public function hasElements()
    {
        $this->__load();
        return parent::hasElements();
    }

    public function save()
    {
        $this->__load();
        return parent::save();
    }

    public function setPluginId($pluginId)
    {
        $this->__load();
        return parent::setPluginId($pluginId);
    }

    public function getPluginId()
    {
        $this->__load();
        return parent::getPluginId();
    }

    public function getParent()
    {
        $this->__load();
        return parent::getParent();
    }

    public function setParent($parent)
    {
        $this->__load();
        return parent::setParent($parent);
    }

    public function getChildren()
    {
        $this->__load();
        return parent::getChildren();
    }

    public function setChildren($children)
    {
        $this->__load();
        return parent::setChildren($children);
    }

    public function getTranslations()
    {
        $this->__load();
        return parent::getTranslations();
    }

    public function addTranslation($translation)
    {
        $this->__load();
        return parent::addTranslation($translation);
    }

    public function hasTranslations()
    {
        $this->__load();
        return parent::hasTranslations();
    }

    public function fromArray(array $array = array (
))
    {
        $this->__load();
        return parent::fromArray($array);
    }

    public function setOneToOne($data, $model, $property, $reference = NULL)
    {
        $this->__load();
        return parent::setOneToOne($data, $model, $property, $reference);
    }

    public function setOneToMany($data, $model, $property, $reference = NULL)
    {
        $this->__load();
        return parent::setOneToMany($data, $model, $property, $reference);
    }

    public function setManyToOne($data, $model, $property)
    {
        $this->__load();
        return parent::setManyToOne($data, $model, $property);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'parentId', 'name', 'label', 'description', 'pluginId', 'position', 'parent', 'elements', 'children', 'plugin', 'translations');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}