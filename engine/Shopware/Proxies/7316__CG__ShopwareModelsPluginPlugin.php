<?php

namespace Shopware\Proxies\__CG__\Shopware\Models\Plugin;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Plugin extends \Shopware\Models\Plugin\Plugin implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getLabel()
    {
        $this->__load();
        return parent::getLabel();
    }

    public function setLabel($label)
    {
        $this->__load();
        return parent::setLabel($label);
    }

    public function getNamespace()
    {
        $this->__load();
        return parent::getNamespace();
    }

    public function setNamespace($namespace)
    {
        $this->__load();
        return parent::setNamespace($namespace);
    }

    public function getSource()
    {
        $this->__load();
        return parent::getSource();
    }

    public function setSource($source)
    {
        $this->__load();
        return parent::setSource($source);
    }

    public function getDescription()
    {
        $this->__load();
        return parent::getDescription();
    }

    public function setDescription($description)
    {
        $this->__load();
        return parent::setDescription($description);
    }

    public function getActive()
    {
        $this->__load();
        return parent::getActive();
    }

    public function setActive($active)
    {
        $this->__load();
        return parent::setActive($active);
    }

    public function getAdded()
    {
        $this->__load();
        return parent::getAdded();
    }

    public function setAdded($added)
    {
        $this->__load();
        return parent::setAdded($added);
    }

    public function getInstalled()
    {
        $this->__load();
        return parent::getInstalled();
    }

    public function setInstalled($installed)
    {
        $this->__load();
        return parent::setInstalled($installed);
    }

    public function getUpdated()
    {
        $this->__load();
        return parent::getUpdated();
    }

    public function setUpdated($updated)
    {
        $this->__load();
        return parent::setUpdated($updated);
    }

    public function getAuthor()
    {
        $this->__load();
        return parent::getAuthor();
    }

    public function setAuthor($author)
    {
        $this->__load();
        return parent::setAuthor($author);
    }

    public function getCopyright()
    {
        $this->__load();
        return parent::getCopyright();
    }

    public function setCopyright($copyright)
    {
        $this->__load();
        return parent::setCopyright($copyright);
    }

    public function getLicense()
    {
        $this->__load();
        return parent::getLicense();
    }

    public function setLicense($license)
    {
        $this->__load();
        return parent::setLicense($license);
    }

    public function getVersion()
    {
        $this->__load();
        return parent::getVersion();
    }

    public function setVersion($version)
    {
        $this->__load();
        return parent::setVersion($version);
    }

    public function getSupport()
    {
        $this->__load();
        return parent::getSupport();
    }

    public function setSupport($support)
    {
        $this->__load();
        return parent::setSupport($support);
    }

    public function getChanges()
    {
        $this->__load();
        return parent::getChanges();
    }

    public function setChanges($changes)
    {
        $this->__load();
        return parent::setChanges($changes);
    }

    public function getLink()
    {
        $this->__load();
        return parent::getLink();
    }

    public function setLink($link)
    {
        $this->__load();
        return parent::setLink($link);
    }

    public function getConfigForms()
    {
        $this->__load();
        return parent::getConfigForms();
    }

    public function setConfigForms($configForms)
    {
        $this->__load();
        return parent::setConfigForms($configForms);
    }

    public function getMenuItems()
    {
        $this->__load();
        return parent::getMenuItems();
    }

    public function setMenuItems($menuItems)
    {
        $this->__load();
        return parent::setMenuItems($menuItems);
    }

    public function getPayments()
    {
        $this->__load();
        return parent::getPayments();
    }

    public function setPayments($payments)
    {
        $this->__load();
        return parent::setPayments($payments);
    }

    public function getTemplates()
    {
        $this->__load();
        return parent::getTemplates();
    }

    public function setTemplates($templates)
    {
        $this->__load();
        return parent::setTemplates($templates);
    }

    public function getLicenses()
    {
        $this->__load();
        return parent::getLicenses();
    }

    public function setLicenses($licenses)
    {
        $this->__load();
        return parent::setLicenses($licenses);
    }

    public function getUpdateVersion()
    {
        $this->__load();
        return parent::getUpdateVersion();
    }

    public function setUpdateVersion($updateVersion)
    {
        $this->__load();
        return parent::setUpdateVersion($updateVersion);
    }

    public function getUpdateSource()
    {
        $this->__load();
        return parent::getUpdateSource();
    }

    public function setUpdateSource($updateSource)
    {
        $this->__load();
        return parent::setUpdateSource($updateSource);
    }

    public function fromArray(array $array = array (
))
    {
        $this->__load();
        return parent::fromArray($array);
    }

    public function setOneToOne($data, $model, $property, $reference = NULL)
    {
        $this->__load();
        return parent::setOneToOne($data, $model, $property, $reference);
    }

    public function setOneToMany($data, $model, $property, $reference = NULL)
    {
        $this->__load();
        return parent::setOneToMany($data, $model, $property, $reference);
    }

    public function setManyToOne($data, $model, $property)
    {
        $this->__load();
        return parent::setManyToOne($data, $model, $property);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'name', 'label', 'namespace', 'source', 'description', 'active', 'added', 'installed', 'updated', 'refreshed', 'author', 'copyright', 'license', 'version', 'support', 'changes', 'link', 'updateVersion', 'updateSource', 'capabilityUpdate', 'capabilityInstall', 'capabilityEnable', 'configForms', 'menuItems', 'payments', 'templates', 'licenses');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}